def func2(arg23, arg24):
    def func3(arg25, arg26):
        var27 = func6()
        result = ((-993 + -396 ^ arg24 + arg25) + arg25 ^ arg24 | arg24 ^ arg23) + 227 ^ arg24 ^ 978234309 ^ var27
        return result
    var28 = func3(arg24, arg23)
    var29 = func9()
    var34 = func10(arg24, var29)
    var38 = func11(arg23, arg24)
    var39 = (arg24 & 967 & arg24 & (arg23 & ((var28 | var34) + var34))) - arg23 + arg23
    var40 = ((arg24 | (-569 ^ var28 - var28 & arg23 ^ ((var34 | (var28 & var28 - var29)) - arg23) ^ arg23 & var38 - var29 + arg24)) | (((((-1112157169 | var29) + arg24 & 1615627834) & var38) + arg23) - var38)) & var28
    var41 = -2059855574 - (-998 - var28 | (arg23 - arg23)) | var34
    result = var39 - (var34 | -1758234129)
    return result
def func10(arg30, arg31):
    var32 = 0
    for var33 in range(2):
        var32 += (var33 | -1) | 9
    return var32
def func9():
    func7()
    result = len(xrange(13))
    func8()
    return result
def func8():
    global len
    del len
def func7():
    global len
    len = lambda x : 1
def func6():
    func4()
    result = len(range(36))
    func5()
    return result
def func5():
    global len
    del len
def func4():
    global len
    len = lambda x : 6
def func1(arg1, arg2):
    var3 = -235032869 & 21708469 & -787 - 243
    if var3 < arg2:
        var4 = arg1 & -706
    else:
        var4 = ((450 - var3) - 238) & arg2
    var5 = -546 ^ (484 & var3)
    var6 = arg2 + var5
    var7 = arg1 | var3 ^ var5 + -617
    var8 = -190319527 | arg2 + (var5 | arg2)
    var9 = (var7 ^ var7) & var5 & var3
    var10 = (var8 | var3) ^ var6
    var11 = var7 + var7
    var12 = arg2 ^ var6
    var13 = var10 + (var8 + var11)
    var14 = var7 + var6
    if var3 < var11:
        var15 = arg1 - var11 - var8
    else:
        var15 = var12 - (var13 ^ (var10 - var13))
    var16 = var5 + -380903680
    var17 = var6 & var13 + var11 - var16
    var18 = var7 + var9 + var7
    var19 = var5 & (var11 - var12) + var11
    var20 = (var16 ^ var14) - arg1 - var12
    var21 = var14 ^ var11 + var20 & var14
    var22 = 924 | arg1 | var21 ^ var18
    result = arg2 ^ (var19 + (var17 | 26) + ((var14 + var20) ^ var13))
    return result
def func11(arg35, arg36):
    def func12(acc, rest):
        var37 = (-2 ^ -9) | rest
        if acc == 0:
            return var37
        else:
            result = func12(acc - 1, var37)
            return result
    result = func12(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 0'
    print 'func_number: 2'
    print 'arg_number: 23'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
    print 'prog_size: 5'
    print 'func_number: 13'
    print 'arg_number: 42'
    for i in xrange(25000):
        x = 5
        x = func2(x, i)
        print x,def func2(arg23, arg24):
    def func3(arg25, arg26):
        var27 = func6()
        result = ((-993 + -396 ^ arg24 + arg25) + arg25 ^ arg24 | arg24 ^ arg23) + 227 ^ arg24 ^ 978234309 ^ var27
        return result
    var28 = func3(arg24, arg23)
    var29 = func9()
    var34 = func10(arg24, var29)
    var38 = func11(arg23, arg24)
    var39 = (arg24 & 967 & arg24 & (arg23 & ((var28 | var34) + var34))) - arg23 + arg23
    var40 = ((arg24 | (-569 ^ var28 - var28 & arg23 ^ ((var34 | (var28 & var28 - var29)) - arg23) ^ arg23 & var38 - var29 + arg24)) | (((((-1112157169 | var29) + arg24 & 1615627834) & var38) + arg23) - var38)) & var28
    var41 = -2059855574 - (-998 - var28 | (arg23 - arg23)) | var34
    result = var39 - (var34 | -1758234129)
    return result
def func10(arg30, arg31):
    var32 = 0
    for var33 in range(2):
        var32 += (var33 | -1) | 9
    return var32
def func9():
    func7()
    result = len(xrange(13))
    func8()
    return result
def func8():
    global len
    del len
def func7():
    global len
    len = lambda x : 1
def func6():
    func4()
    result = len(range(36))
    func5()
    return result
def func5():
    global len
    del len
def func4():
    global len
    len = lambda x : 6
def func1(arg1, arg2):
    var3 = -235032869 & 21708469 & -787 - 243
    if var3 < arg2:
        var4 = arg1 & -706
    else:
        var4 = ((450 - var3) - 238) & arg2
    var5 = -546 ^ (484 & var3)
    var6 = arg2 + var5
    var7 = arg1 | var3 ^ var5 + -617
    var8 = -190319527 | arg2 + (var5 | arg2)
    var9 = (var7 ^ var7) & var5 & var3
    var10 = (var8 | var3) ^ var6
    var11 = var7 + var7
    var12 = arg2 ^ var6
    var13 = var10 + (var8 + var11)
    var14 = var7 + var6
    if var3 < var11:
        var15 = arg1 - var11 - var8
    else:
        var15 = var12 - (var13 ^ (var10 - var13))
    var16 = var5 + -380903680
    var17 = var6 & var13 + var11 - var16
    var18 = var7 + var9 + var7
    var19 = var5 & (var11 - var12) + var11
    var20 = (var16 ^ var14) - arg1 - var12
    var21 = var14 ^ var11 + var20 & var14
    var22 = 924 | arg1 | var21 ^ var18
    result = arg2 ^ (var19 + (var17 | 26) + ((var14 + var20) ^ var13))
    return result
def func11(arg35, arg36):
    def func12(acc, rest):
        var37 = (-2 ^ -9) | rest
        if acc == 0:
            return var37
        else:
            result = func12(acc - 1, var37)
            return result
    result = func12(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 0'
    print 'func_number: 2'
    print 'arg_number: 23'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
    print 'prog_size: 5'
    print 'func_number: 13'
    print 'arg_number: 42'
    for i in xrange(25000):
        x = 5
        x = func2(x, i)
        print x,def func2(arg23, arg24):
    def func3(arg25, arg26):
        var27 = func6()
        result = ((-993 + -396 ^ arg24 + arg25) + arg25 ^ arg24 | arg24 ^ arg23) + 227 ^ arg24 ^ 978234309 ^ var27
        return result
    var28 = func3(arg24, arg23)
    var29 = func9()
    var34 = func10(arg24, var29)
    var38 = func11(arg23, arg24)
    var39 = (arg24 & 967 & arg24 & (arg23 & ((var28 | var34) + var34))) - arg23 + arg23
    var40 = ((arg24 | (-569 ^ var28 - var28 & arg23 ^ ((var34 | (var28 & var28 - var29)) - arg23) ^ arg23 & var38 - var29 + arg24)) | (((((-1112157169 | var29) + arg24 & 1615627834) & var38) + arg23) - var38)) & var28
    var41 = -2059855574 - (-998 - var28 | (arg23 - arg23)) | var34
    result = var39 - (var34 | -1758234129)
    return result
def func10(arg30, arg31):
    var32 = 0
    for var33 in range(2):
        var32 += (var33 | -1) | 9
    return var32
def func9():
    func7()
    result = len(xrange(13))
    func8()
    return result
def func8():
    global len
    del len
def func7():
    global len
    len = lambda x : 1
def func6():
    func4()
    result = len(range(36))
    func5()
    return result
def func5():
    global len
    del len
def func4():
    global len
    len = lambda x : 6
def func1(arg1, arg2):
    var3 = -235032869 & 21708469 & -787 - 243
    if var3 < arg2:
        var4 = arg1 & -706
    else:
        var4 = ((450 - var3) - 238) & arg2
    var5 = -546 ^ (484 & var3)
    var6 = arg2 + var5
    var7 = arg1 | var3 ^ var5 + -617
    var8 = -190319527 | arg2 + (var5 | arg2)
    var9 = (var7 ^ var7) & var5 & var3
    var10 = (var8 | var3) ^ var6
    var11 = var7 + var7
    var12 = arg2 ^ var6
    var13 = var10 + (var8 + var11)
    var14 = var7 + var6
    if var3 < var11:
        var15 = arg1 - var11 - var8
    else:
        var15 = var12 - (var13 ^ (var10 - var13))
    var16 = var5 + -380903680
    var17 = var6 & var13 + var11 - var16
    var18 = var7 + var9 + var7
    var19 = var5 & (var11 - var12) + var11
    var20 = (var16 ^ var14) - arg1 - var12
    var21 = var14 ^ var11 + var20 & var14
    var22 = 924 | arg1 | var21 ^ var18
    result = arg2 ^ (var19 + (var17 | 26) + ((var14 + var20) ^ var13))
    return result
def func11(arg35, arg36):
    def func12(acc, rest):
        var37 = (-2 ^ -9) | rest
        if acc == 0:
            return var37
        else:
            result = func12(acc - 1, var37)
            return result
    result = func12(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 0'
    print 'func_number: 2'
    print 'arg_number: 23'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
    print 'prog_size: 5'
    print 'func_number: 13'
    print 'arg_number: 42'
    for i in xrange(25000):
        x = 5
        x = func2(x, i)
        print x,def func2(arg23, arg24):
    def func3(arg25, arg26):
        var27 = func6()
        result = ((-993 + -396 ^ arg24 + arg25) + arg25 ^ arg24 | arg24 ^ arg23) + 227 ^ arg24 ^ 978234309 ^ var27
        return result
    var28 = func3(arg24, arg23)
    var29 = func9()
    var34 = func10(arg24, var29)
    var38 = func11(arg23, arg24)
    var39 = (arg24 & 967 & arg24 & (arg23 & ((var28 | var34) + var34))) - arg23 + arg23
    var40 = ((arg24 | (-569 ^ var28 - var28 & arg23 ^ ((var34 | (var28 & var28 - var29)) - arg23) ^ arg23 & var38 - var29 + arg24)) | (((((-1112157169 | var29) + arg24 & 1615627834) & var38) + arg23) - var38)) & var28
    var41 = -2059855574 - (-998 - var28 | (arg23 - arg23)) | var34
    result = var39 - (var34 | -1758234129)
    return result
def func10(arg30, arg31):
    var32 = 0
    for var33 in range(2):
        var32 += (var33 | -1) | 9
    return var32
def func9():
    func7()
    result = len(xrange(13))
    func8()
    return result
def func8():
    global len
    del len
def func7():
    global len
    len = lambda x : 1
def func6():
    func4()
    result = len(range(36))
    func5()
    return result
def func5():
    global len
    del len
def func4():
    global len
    len = lambda x : 6
def func1(arg1, arg2):
    var3 = -235032869 & 21708469 & -787 - 243
    if var3 < arg2:
        var4 = arg1 & -706
    else:
        var4 = ((450 - var3) - 238) & arg2
    var5 = -546 ^ (484 & var3)
    var6 = arg2 + var5
    var7 = arg1 | var3 ^ var5 + -617
    var8 = -190319527 | arg2 + (var5 | arg2)
    var9 = (var7 ^ var7) & var5 & var3
    var10 = (var8 | var3) ^ var6
    var11 = var7 + var7
    var12 = arg2 ^ var6
    var13 = var10 + (var8 + var11)
    var14 = var7 + var6
    if var3 < var11:
        var15 = arg1 - var11 - var8
    else:
        var15 = var12 - (var13 ^ (var10 - var13))
    var16 = var5 + -380903680
    var17 = var6 & var13 + var11 - var16
    var18 = var7 + var9 + var7
    var19 = var5 & (var11 - var12) + var11
    var20 = (var16 ^ var14) - arg1 - var12
    var21 = var14 ^ var11 + var20 & var14
    var22 = 924 | arg1 | var21 ^ var18
    result = arg2 ^ (var19 + (var17 | 26) + ((var14 + var20) ^ var13))
    return result
def func11(arg35, arg36):
    def func12(acc, rest):
        var37 = (-2 ^ -9) | rest
        if acc == 0:
            return var37
        else:
            result = func12(acc - 1, var37)
            return result
    result = func12(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 0'
    print 'func_number: 2'
    print 'arg_number: 23'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
    print 'prog_size: 5'
    print 'func_number: 13'
    print 'arg_number: 42'
    for i in xrange(25000):
        x = 5
        x = func2(x, i)
        print x,def func2(arg23, arg24):
    def func3(arg25, arg26):
        var27 = func6()
        result = ((-993 + -396 ^ arg24 + arg25) + arg25 ^ arg24 | arg24 ^ arg23) + 227 ^ arg24 ^ 978234309 ^ var27
        return result
    var28 = func3(arg24, arg23)
    var29 = func9()
    var34 = func10(arg24, var29)
    var38 = func11(arg23, arg24)
    var39 = (arg24 & 967 & arg24 & (arg23 & ((var28 | var34) + var34))) - arg23 + arg23
    var40 = ((arg24 | (-569 ^ var28 - var28 & arg23 ^ ((var34 | (var28 & var28 - var29)) - arg23) ^ arg23 & var38 - var29 + arg24)) | (((((-1112157169 | var29) + arg24 & 1615627834) & var38) + arg23) - var38)) & var28
    var41 = -2059855574 - (-998 - var28 | (arg23 - arg23)) | var34
    result = var39 - (var34 | -1758234129)
    return result
def func10(arg30, arg31):
    var32 = 0
    for var33 in range(2):
        var32 += (var33 | -1) | 9
    return var32
def func9():
    func7()
    result = len(xrange(13))
    func8()
    return result
def func8():
    global len
    del len
def func7():
    global len
    len = lambda x : 1
def func6():
    func4()
    result = len(range(36))
    func5()
    return result
def func5():
    global len
    del len
def func4():
    global len
    len = lambda x : 6
def func1(arg1, arg2):
    var3 = -235032869 & 21708469 & -787 - 243
    if var3 < arg2:
        var4 = arg1 & -706
    else:
        var4 = ((450 - var3) - 238) & arg2
    var5 = -546 ^ (484 & var3)
    var6 = arg2 + var5
    var7 = arg1 | var3 ^ var5 + -617
    var8 = -190319527 | arg2 + (var5 | arg2)
    var9 = (var7 ^ var7) & var5 & var3
    var10 = (var8 | var3) ^ var6
    var11 = var7 + var7
    var12 = arg2 ^ var6
    var13 = var10 + (var8 + var11)
    var14 = var7 + var6
    if var3 < var11:
        var15 = arg1 - var11 - var8
    else:
        var15 = var12 - (var13 ^ (var10 - var13))
    var16 = var5 + -380903680
    var17 = var6 & var13 + var11 - var16
    var18 = var7 + var9 + var7
    var19 = var5 & (var11 - var12) + var11
    var20 = (var16 ^ var14) - arg1 - var12
    var21 = var14 ^ var11 + var20 & var14
    var22 = 924 | arg1 | var21 ^ var18
    result = arg2 ^ (var19 + (var17 | 26) + ((var14 + var20) ^ var13))
    return result
def func11(arg35, arg36):
    def func12(acc, rest):
        var37 = (-2 ^ -9) | rest
        if acc == 0:
            return var37
        else:
            result = func12(acc - 1, var37)
            return result
    result = func12(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 0'
    print 'func_number: 2'
    print 'arg_number: 23'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
    print 'prog_size: 5'
    print 'func_number: 13'
    print 'arg_number: 42'
    for i in xrange(25000):
        x = 5
        x = func2(x, i)
        print x,def func2(arg23, arg24):
    def func3(arg25, arg26):
        var27 = func6()
        result = ((-993 + -396 ^ arg24 + arg25) + arg25 ^ arg24 | arg24 ^ arg23) + 227 ^ arg24 ^ 978234309 ^ var27
        return result
    var28 = func3(arg24, arg23)
    var29 = func9()
    var34 = func10(arg24, var29)
    var38 = func11(arg23, arg24)
    var39 = (arg24 & 967 & arg24 & (arg23 & ((var28 | var34) + var34))) - arg23 + arg23
    var40 = ((arg24 | (-569 ^ var28 - var28 & arg23 ^ ((var34 | (var28 & var28 - var29)) - arg23) ^ arg23 & var38 - var29 + arg24)) | (((((-1112157169 | var29) + arg24 & 1615627834) & var38) + arg23) - var38)) & var28
    var41 = -2059855574 - (-998 - var28 | (arg23 - arg23)) | var34
    result = var39 - (var34 | -1758234129)
    return result
def func10(arg30, arg31):
    var32 = 0
    for var33 in range(2):
        var32 += (var33 | -1) | 9
    return var32
def func9():
    func7()
    result = len(xrange(13))
    func8()
    return result
def func8():
    global len
    del len
def func7():
    global len
    len = lambda x : 1
def func6():
    func4()
    result = len(range(36))
    func5()
    return result
def func5():
    global len
    del len
def func4():
    global len
    len = lambda x : 6
def func1(arg1, arg2):
    var3 = -235032869 & 21708469 & -787 - 243
    if var3 < arg2:
        var4 = arg1 & -706
    else:
        var4 = ((450 - var3) - 238) & arg2
    var5 = -546 ^ (484 & var3)
    var6 = arg2 + var5
    var7 = arg1 | var3 ^ var5 + -617
    var8 = -190319527 | arg2 + (var5 | arg2)
    var9 = (var7 ^ var7) & var5 & var3
    var10 = (var8 | var3) ^ var6
    var11 = var7 + var7
    var12 = arg2 ^ var6
    var13 = var10 + (var8 + var11)
    var14 = var7 + var6
    if var3 < var11:
        var15 = arg1 - var11 - var8
    else:
        var15 = var12 - (var13 ^ (var10 - var13))
    var16 = var5 + -380903680
    var17 = var6 & var13 + var11 - var16
    var18 = var7 + var9 + var7
    var19 = var5 & (var11 - var12) + var11
    var20 = (var16 ^ var14) - arg1 - var12
    var21 = var14 ^ var11 + var20 & var14
    var22 = 924 | arg1 | var21 ^ var18
    result = arg2 ^ (var19 + (var17 | 26) + ((var14 + var20) ^ var13))
    return result
def func11(arg35, arg36):
    def func12(acc, rest):
        var37 = (-2 ^ -9) | rest
        if acc == 0:
            return var37
        else:
            result = func12(acc - 1, var37)
            return result
    result = func12(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 0'
    print 'func_number: 2'
    print 'arg_number: 23'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
    print 'prog_size: 5'
    print 'func_number: 13'
    print 'arg_number: 42'
    for i in xrange(25000):
        x = 5
        x = func2(x, i)
        print x,def func2(arg23, arg24):
    def func3(arg25, arg26):
        var27 = func6()
        result = ((-993 + -396 ^ arg24 + arg25) + arg25 ^ arg24 | arg24 ^ arg23) + 227 ^ arg24 ^ 978234309 ^ var27
        return result
    var28 = func3(arg24, arg23)
    var29 = func9()
    var34 = func10(arg24, var29)
    var38 = func11(arg23, arg24)
    var39 = (arg24 & 967 & arg24 & (arg23 & ((var28 | var34) + var34))) - arg23 + arg23
    var40 = ((arg24 | (-569 ^ var28 - var28 & arg23 ^ ((var34 | (var28 & var28 - var29)) - arg23) ^ arg23 & var38 - var29 + arg24)) | (((((-1112157169 | var29) + arg24 & 1615627834) & var38) + arg23) - var38)) & var28
    var41 = -2059855574 - (-998 - var28 | (arg23 - arg23)) | var34
    result = var39 - (var34 | -1758234129)
    return result
def func10(arg30, arg31):
    var32 = 0
    for var33 in range(2):
        var32 += (var33 | -1) | 9
    return var32
def func9():
    func7()
    result = len(xrange(13))
    func8()
    return result
def func8():
    global len
    del len
def func7():
    global len
    len = lambda x : 1
def func6():
    func4()
    result = len(range(36))
    func5()
    return result
def func5():
    global len
    del len
def func4():
    global len
    len = lambda x : 6
def func1(arg1, arg2):
    var3 = -235032869 & 21708469 & -787 - 243
    if var3 < arg2:
        var4 = arg1 & -706
    else:
        var4 = ((450 - var3) - 238) & arg2
    var5 = -546 ^ (484 & var3)
    var6 = arg2 + var5
    var7 = arg1 | var3 ^ var5 + -617
    var8 = -190319527 | arg2 + (var5 | arg2)
    var9 = (var7 ^ var7) & var5 & var3
    var10 = (var8 | var3) ^ var6
    var11 = var7 + var7
    var12 = arg2 ^ var6
    var13 = var10 + (var8 + var11)
    var14 = var7 + var6
    if var3 < var11:
        var15 = arg1 - var11 - var8
    else:
        var15 = var12 - (var13 ^ (var10 - var13))
    var16 = var5 + -380903680
    var17 = var6 & var13 + var11 - var16
    var18 = var7 + var9 + var7
    var19 = var5 & (var11 - var12) + var11
    var20 = (var16 ^ var14) - arg1 - var12
    var21 = var14 ^ var11 + var20 & var14
    var22 = 924 | arg1 | var21 ^ var18
    result = arg2 ^ (var19 + (var17 | 26) + ((var14 + var20) ^ var13))
    return result
def func11(arg35, arg36):
    def func12(acc, rest):
        var37 = (-2 ^ -9) | rest
        if acc == 0:
            return var37
        else:
            result = func12(acc - 1, var37)
            return result
    result = func12(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 0'
    print 'func_number: 2'
    print 'arg_number: 23'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
    print 'prog_size: 5'
    print 'func_number: 13'
    print 'arg_number: 42'
    for i in xrange(25000):
        x = 5
        x = func2(x, i)
        print x,def func2(arg23, arg24):
    def func3(arg25, arg26):
        var27 = func6()
        result = ((-993 + -396 ^ arg24 + arg25) + arg25 ^ arg24 | arg24 ^ arg23) + 227 ^ arg24 ^ 978234309 ^ var27
        return result
    var28 = func3(arg24, arg23)
    var29 = func9()
    var34 = func10(arg24, var29)
    var38 = func11(arg23, arg24)
    var39 = (arg24 & 967 & arg24 & (arg23 & ((var28 | var34) + var34))) - arg23 + arg23
    var40 = ((arg24 | (-569 ^ var28 - var28 & arg23 ^ ((var34 | (var28 & var28 - var29)) - arg23) ^ arg23 & var38 - var29 + arg24)) | (((((-1112157169 | var29) + arg24 & 1615627834) & var38) + arg23) - var38)) & var28
    var41 = -2059855574 - (-998 - var28 | (arg23 - arg23)) | var34
    result = var39 - (var34 | -1758234129)
    return result
def func10(arg30, arg31):
    var32 = 0
    for var33 in range(2):
        var32 += (var33 | -1) | 9
    return var32
def func9():
    func7()
    result = len(xrange(13))
    func8()
    return result
def func8():
    global len
    del len
def func7():
    global len
    len = lambda x : 1
def func6():
    func4()
    result = len(range(36))
    func5()
    return result
def func5():
    global len
    del len
def func4():
    global len
    len = lambda x : 6
def func1(arg1, arg2):
    var3 = -235032869 & 21708469 & -787 - 243
    if var3 < arg2:
        var4 = arg1 & -706
    else:
        var4 = ((450 - var3) - 238) & arg2
    var5 = -546 ^ (484 & var3)
    var6 = arg2 + var5
    var7 = arg1 | var3 ^ var5 + -617
    var8 = -190319527 | arg2 + (var5 | arg2)
    var9 = (var7 ^ var7) & var5 & var3
    var10 = (var8 | var3) ^ var6
    var11 = var7 + var7
    var12 = arg2 ^ var6
    var13 = var10 + (var8 + var11)
    var14 = var7 + var6
    if var3 < var11:
        var15 = arg1 - var11 - var8
    else:
        var15 = var12 - (var13 ^ (var10 - var13))
    var16 = var5 + -380903680
    var17 = var6 & var13 + var11 - var16
    var18 = var7 + var9 + var7
    var19 = var5 & (var11 - var12) + var11
    var20 = (var16 ^ var14) - arg1 - var12
    var21 = var14 ^ var11 + var20 & var14
    var22 = 924 | arg1 | var21 ^ var18
    result = arg2 ^ (var19 + (var17 | 26) + ((var14 + var20) ^ var13))
    return result
def func11(arg35, arg36):
    def func12(acc, rest):
        var37 = (-2 ^ -9) | rest
        if acc == 0:
            return var37
        else:
            result = func12(acc - 1, var37)
            return result
    result = func12(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 0'
    print 'func_number: 2'
    print 'arg_number: 23'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
    print 'prog_size: 5'
    print 'func_number: 13'
    print 'arg_number: 42'
    for i in xrange(25000):
        x = 5
        x = func2(x, i)
        print x,def func2(arg23, arg24):
    def func3(arg25, arg26):
        var27 = func6()
        result = ((-993 + -396 ^ arg24 + arg25) + arg25 ^ arg24 | arg24 ^ arg23) + 227 ^ arg24 ^ 978234309 ^ var27
        return result
    var28 = func3(arg24, arg23)
    var29 = func9()
    var34 = func10(arg24, var29)
    var38 = func11(arg23, arg24)
    var39 = (arg24 & 967 & arg24 & (arg23 & ((var28 | var34) + var34))) - arg23 + arg23
    var40 = ((arg24 | (-569 ^ var28 - var28 & arg23 ^ ((var34 | (var28 & var28 - var29)) - arg23) ^ arg23 & var38 - var29 + arg24)) | (((((-1112157169 | var29) + arg24 & 1615627834) & var38) + arg23) - var38)) & var28
    var41 = -2059855574 - (-998 - var28 | (arg23 - arg23)) | var34
    result = var39 - (var34 | -1758234129)
    return result
def func10(arg30, arg31):
    var32 = 0
    for var33 in range(2):
        var32 += (var33 | -1) | 9
    return var32
def func9():
    func7()
    result = len(xrange(13))
    func8()
    return result
def func8():
    global len
    del len
def func7():
    global len
    len = lambda x : 1
def func6():
    func4()
    result = len(range(36))
    func5()
    return result
def func5():
    global len
    del len
def func4():
    global len
    len = lambda x : 6
def func1(arg1, arg2):
    var3 = -235032869 & 21708469 & -787 - 243
    if var3 < arg2:
        var4 = arg1 & -706
    else:
        var4 = ((450 - var3) - 238) & arg2
    var5 = -546 ^ (484 & var3)
    var6 = arg2 + var5
    var7 = arg1 | var3 ^ var5 + -617
    var8 = -190319527 | arg2 + (var5 | arg2)
    var9 = (var7 ^ var7) & var5 & var3
    var10 = (var8 | var3) ^ var6
    var11 = var7 + var7
    var12 = arg2 ^ var6
    var13 = var10 + (var8 + var11)
    var14 = var7 + var6
    if var3 < var11:
        var15 = arg1 - var11 - var8
    else:
        var15 = var12 - (var13 ^ (var10 - var13))
    var16 = var5 + -380903680
    var17 = var6 & var13 + var11 - var16
    var18 = var7 + var9 + var7
    var19 = var5 & (var11 - var12) + var11
    var20 = (var16 ^ var14) - arg1 - var12
    var21 = var14 ^ var11 + var20 & var14
    var22 = 924 | arg1 | var21 ^ var18
    result = arg2 ^ (var19 + (var17 | 26) + ((var14 + var20) ^ var13))
    return result
def func11(arg35, arg36):
    def func12(acc, rest):
        var37 = (-2 ^ -9) | rest
        if acc == 0:
            return var37
        else:
            result = func12(acc - 1, var37)
            return result
    result = func12(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 0'
    print 'func_number: 2'
    print 'arg_number: 23'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
    print 'prog_size: 5'
    print 'func_number: 13'
    print 'arg_number: 42'
    for i in xrange(25000):
        x = 5
        x = func2(x, i)
        print x,def func2(arg23, arg24):
    def func3(arg25, arg26):
        var27 = func6()
        result = ((-993 + -396 ^ arg24 + arg25) + arg25 ^ arg24 | arg24 ^ arg23) + 227 ^ arg24 ^ 978234309 ^ var27
        return result
    var28 = func3(arg24, arg23)
    var29 = func9()
    var34 = func10(arg24, var29)
    var38 = func11(arg23, arg24)
    var39 = (arg24 & 967 & arg24 & (arg23 & ((var28 | var34) + var34))) - arg23 + arg23
    var40 = ((arg24 | (-569 ^ var28 - var28 & arg23 ^ ((var34 | (var28 & var28 - var29)) - arg23) ^ arg23 & var38 - var29 + arg24)) | (((((-1112157169 | var29) + arg24 & 1615627834) & var38) + arg23) - var38)) & var28
    var41 = -2059855574 - (-998 - var28 | (arg23 - arg23)) | var34
    result = var39 - (var34 | -1758234129)
    return result
def func10(arg30, arg31):
    var32 = 0
    for var33 in range(2):
        var32 += (var33 | -1) | 9
    return var32
def func9():
    func7()
    result = len(xrange(13))
    func8()
    return result
def func8():
    global len
    del len
def func7():
    global len
    len = lambda x : 1
def func6():
    func4()
    result = len(range(36))
    func5()
    return result
def func5():
    global len
    del len
def func4():
    global len
    len = lambda x : 6
def func1(arg1, arg2):
    var3 = -235032869 & 21708469 & -787 - 243
    if var3 < arg2:
        var4 = arg1 & -706
    else:
        var4 = ((450 - var3) - 238) & arg2
    var5 = -546 ^ (484 & var3)
    var6 = arg2 + var5
    var7 = arg1 | var3 ^ var5 + -617
    var8 = -190319527 | arg2 + (var5 | arg2)
    var9 = (var7 ^ var7) & var5 & var3
    var10 = (var8 | var3) ^ var6
    var11 = var7 + var7
    var12 = arg2 ^ var6
    var13 = var10 + (var8 + var11)
    var14 = var7 + var6
    if var3 < var11:
        var15 = arg1 - var11 - var8
    else:
        var15 = var12 - (var13 ^ (var10 - var13))
    var16 = var5 + -380903680
    var17 = var6 & var13 + var11 - var16
    var18 = var7 + var9 + var7
    var19 = var5 & (var11 - var12) + var11
    var20 = (var16 ^ var14) - arg1 - var12
    var21 = var14 ^ var11 + var20 & var14
    var22 = 924 | arg1 | var21 ^ var18
    result = arg2 ^ (var19 + (var17 | 26) + ((var14 + var20) ^ var13))
    return result
def func11(arg35, arg36):
    def func12(acc, rest):
        var37 = (-2 ^ -9) | rest
        if acc == 0:
            return var37
        else:
            result = func12(acc - 1, var37)
            return result
    result = func12(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 0'
    print 'func_number: 2'
    print 'arg_number: 23'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
    print 'prog_size: 5'
    print 'func_number: 13'
    print 'arg_number: 42'
    for i in xrange(25000):
        x = 5
        x = func2(x, i)
        print x,def func2(arg23, arg24):
    def func3(arg25, arg26):
        var27 = func6()
        result = ((-993 + -396 ^ arg24 + arg25) + arg25 ^ arg24 | arg24 ^ arg23) + 227 ^ arg24 ^ 978234309 ^ var27
        return result
    var28 = func3(arg24, arg23)
    var29 = func9()
    var34 = func10(arg24, var29)
    var38 = func11(arg23, arg24)
    var39 = (arg24 & 967 & arg24 & (arg23 & ((var28 | var34) + var34))) - arg23 + arg23
    var40 = ((arg24 | (-569 ^ var28 - var28 & arg23 ^ ((var34 | (var28 & var28 - var29)) - arg23) ^ arg23 & var38 - var29 + arg24)) | (((((-1112157169 | var29) + arg24 & 1615627834) & var38) + arg23) - var38)) & var28
    var41 = -2059855574 - (-998 - var28 | (arg23 - arg23)) | var34
    result = var39 - (var34 | -1758234129)
    return result
def func10(arg30, arg31):
    var32 = 0
    for var33 in range(2):
        var32 += (var33 | -1) | 9
    return var32
def func9():
    func7()
    result = len(xrange(13))
    func8()
    return result
def func8():
    global len
    del len
def func7():
    global len
    len = lambda x : 1
def func6():
    func4()
    result = len(range(36))
    func5()
    return result
def func5():
    global len
    del len
def func4():
    global len
    len = lambda x : 6
def func1(arg1, arg2):
    var3 = -235032869 & 21708469 & -787 - 243
    if var3 < arg2:
        var4 = arg1 & -706
    else:
        var4 = ((450 - var3) - 238) & arg2
    var5 = -546 ^ (484 & var3)
    var6 = arg2 + var5
    var7 = arg1 | var3 ^ var5 + -617
    var8 = -190319527 | arg2 + (var5 | arg2)
    var9 = (var7 ^ var7) & var5 & var3
    var10 = (var8 | var3) ^ var6
    var11 = var7 + var7
    var12 = arg2 ^ var6
    var13 = var10 + (var8 + var11)
    var14 = var7 + var6
    if var3 < var11:
        var15 = arg1 - var11 - var8
    else:
        var15 = var12 - (var13 ^ (var10 - var13))
    var16 = var5 + -380903680
    var17 = var6 & var13 + var11 - var16
    var18 = var7 + var9 + var7
    var19 = var5 & (var11 - var12) + var11
    var20 = (var16 ^ var14) - arg1 - var12
    var21 = var14 ^ var11 + var20 & var14
    var22 = 924 | arg1 | var21 ^ var18
    result = arg2 ^ (var19 + (var17 | 26) + ((var14 + var20) ^ var13))
    return result
def func11(arg35, arg36):
    def func12(acc, rest):
        var37 = (-2 ^ -9) | rest
        if acc == 0:
            return var37
        else:
            result = func12(acc - 1, var37)
            return result
    result = func12(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 0'
    print 'func_number: 2'
    print 'arg_number: 23'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
    print 'prog_size: 5'
    print 'func_number: 13'
    print 'arg_number: 42'
    for i in xrange(25000):
        x = 5
        x = func2(x, i)
        print x,
